
To enable experimental support for decorators, you must enable the experimentalDecorators 
compiler option either on the command line or in your tsconfig.json:


tsconfig.json:

{
  "compilerOptions": {
    "target": "ES5",
    "experimentalDecorators": true
  }
}

Decorators is the mechahism of adding metadata, information or 
logic to a  preexisting source code

Decorator are attrubites applied to classes and their members
and with this we can change how they behave

This decorator is just a function which is called by JAvascript runtime. 
SO JS engine or runtime should class this function(decorator) 
and pass our class to it so in that function nwe have a chance to modify the class
so me can add new propertie , methods new data members or can change the implementation 
to the function

-- Decorators

A Decorator is a special kind of declaration that can be attached 
to a class declaration, method, accessor, property, or parameter. 
Decorators use the form @expression, where expression must evaluate to a function 
that will be called at runtime with information about the decorated declaration.


For example, given the decorator @sealed we might write the sealed function as follows:

function sealed(target) {
  // do something with 'target' ...
}

-- Decorator Factories
If we want to customize how a decorator is applied to a declaration, we can write a decorator factory. A Decorator Factory is simply a function that returns the expression that will be called by the decorator at runtime.

We can write a decorator factory in the following fashion:

function color(value: string) {
  // this is the decorator factory, it sets up
  // the returned decorator function
  return function (target) {
    // this is the decorator
    // do something with 'target' and 'value'...
  };
}


-- Decorator Composition
Multiple decorators can be applied to a declaration, for example on a single line:

@f @g x
Try
On multiple lines:

@f
@g
x